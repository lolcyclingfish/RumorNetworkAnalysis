##Local
#LY
library(magrittr)
library(httr)
library(data.table)
library(igraph)
######################
#load data and create network
######################
pol = read.csv('data/pol_agg.csv',stringsAsFactors = FALSE)
pol = pol[pol$Source!=pol$website,]
#fake news
#g_valued <- graph_from_data_frame(d = network_table[,1:3,with=FALSE],directed = FALSE,vertices = total_table)
g_fake_valued = graph_from_data_frame(d = pol[,c(1,2,5)],directed = T)
graph.density(g_fake_valued)  #0.001571897
L = layout_with_fr(g_fake_valued)  # Fruchterman Reingold
plot(g_fake_valued,vertex.color=V(g_fake_valued)$color,
layout = L, vertex.label=F,vertex.size=6)
netm <- shortest.paths(g_fake_valued, v=V(g_fake_valued), to=V(g_fake_valued))
colnames(netm) <- V(g_fake_valued)$name
setwd("~/Documents/RumorNetworkAnalysis")
##Local
#LY
library(magrittr)
library(httr)
library(data.table)
library(igraph)
######################
#load data and create network
######################
pol = read.csv('data/pol_agg.csv',stringsAsFactors = FALSE)
pol = pol[pol$Source!=pol$website,]
#fake news
#g_valued <- graph_from_data_frame(d = network_table[,1:3,with=FALSE],directed = FALSE,vertices = total_table)
g_fake_valued = graph_from_data_frame(d = pol[,c(1,2,5)],directed = T)
graph.density(g_fake_valued)  #0.001571897
L = layout_with_fr(g_fake_valued)  # Fruchterman Reingold
plot(g_fake_valued,vertex.color=V(g_fake_valued)$color,
layout = L, vertex.label=F,vertex.size=6)
netm <- shortest.paths(g_fake_valued, v=V(g_fake_valued), to=V(g_fake_valued))
colnames(netm) <- V(g_fake_valued)$name
rownames(netm) <- V(g_fake_valued)$name
palf <- colorRampPalette(c("white", "navy"))
heatmap(netm, Rowv = NA, Colv = NA, col = palf(100),
scale="none", margins=c(10,10) )
##Local
#LY
library(magrittr)
library(httr)
library(data.table)
library(igraph)
######################
#load data and create network
######################
pol = read.csv('data/pol_agg.csv',stringsAsFactors = FALSE)
pol = pol[pol$Source!=pol$website,]
##Local
#LY
rm(list=ls())
library(magrittr)
library(httr)
library(data.table)
library(igraph)
######################
#load data and create network
######################
pol = read.csv('data/pol_agg.csv',stringsAsFactors = FALSE)
pol = pol[pol$Source!=pol$website,]
View(pol)
g_fake_valued = graph_from_data_frame(d = pol[,c(1,2,5)],directed = T)
g_true_valued = graph_from_data_frame(d = pol[,c(1,2,4)],directed = T)
graph.density(g_true_valued)
graph.density(g_fake_valued)  #0.001571897
graph.density(g_true_valued)
deg_cenrality<-centr_degree(g_fake_valued, mode = "all", loops = TRUE,normalized = TRUE)
deg_cenrality
centr_degree(g_fake_valued, mode = "all", loops = TRUE,normalized = TRUE)$centralization
print(centr_degree(g_fake_valued, mode = "all", loops = TRUE,normalized = TRUE)$centralization)
fake_central_deg<-centr_degree(g_fake_valued, mode = "all", loops = TRUE,normalized = TRUE)$centralization)
fake_central_deg
fake_central_deg<-centr_degree(g_fake_valued, mode = "all",
loops = TRUE,normalized = TRUE)
fake_central_deg$centralization
true_central_deg<-centr_degree(g_true_valued, mode = "all",
loops = TRUE,normalized = TRUE)
true_central_deg$centralization
#convert into network
library('network')
library('sna')
#Degree Centrality
fake_central_deg<-centr_degree(g_fake_valued, mode = "all",
loops = TRUE,normalized = TRUE)
fake_central_deg$centralization
true_central_deg<-centr_degree(g_true_valued, mode = "all",
loops = TRUE,normalized = TRUE)
true_central_deg$centralization
par(mfrow=c(1,1), mar=c(1,1,1,1), oma=c(1,2,2,1))
for (i in c("g_true_valued", "g_fake_valued")){
ob<-get(i)
L = layout_with_fr(ob)  # Fruchterman Reingold
E(ob)$width = 5*(pol$page_url+1)
## We can set the width of the edges to
#be proportionate to the number of cooccurences
plot(ob,vertex.color=V(ob)$color, layout = L,
vertex.size=6, main=i)
}
par(mfrow=c(1,1), mar=c(1,1,1,1), oma=c(1,2,2,1))
for (i in c("g_true_valued")){
ob<-get(i)
L = layout_with_fr(ob)  # Fruchterman Reingold
E(ob)$width = 5*(pol$page_url+1)
## We can set the width of the edges to
#be proportionate to the number of cooccurences
plot(ob,vertex.color=V(ob)$color, layout = L,
vertex.size=6, main=i,vertex.label=NA,edge.arrow.size=.4)
}
par(mfrow=c(1,1), mar=c(1,1,1,1), oma=c(1,2,2,1))
for (i in c("g_true_valued","g_fake_valued")){
ob<-get(i)
L = layout_with_fr(ob)  # Fruchterman Reingold
E(ob)$width = 2*(pol$page_url+1)
## We can set the width of the edges to
#be proportionate to the number of cooccurences
plot(ob,vertex.color=V(ob)$color, layout = L,
vertex.size=6, main=i,vertex.label=NA,edge.arrow.size=.4)
}
#Plot
par(mfrow=c(1,1), mar=c(1,1,1,1), oma=c(1,2,2,1))
for (i in c("g_true_valued","g_fake_valued")){
ob<-get(i)
K=layout_in_circle(ob)
L = layout_with_fr(ob)  # Fruchterman Reingold
E(ob)$width = 2*(pol$page_url+1)
## We can set the width of the edges to
#be proportionate to the number of cooccurences
plot(ob,vertex.color=V(ob)$color, layout = K,
vertex.size=6, main=i,vertex.label=NA,edge.arrow.size=.4)
}
par(mfrow=c(1,1), mar=c(1,1,1,1), oma=c(1,2,2,1))
for (i in c("g_true_valued","g_fake_valued")){
ob<-get(i)
R=layout_with_kk(ob)
#K=layout_in_circle(ob)
#L = layout_with_fr(ob)  # Fruchterman Reingold
E(ob)$width = 2*(pol$page_url+1)
## We can set the width of the edges to
#be proportionate to the number of cooccurences
plot(ob,vertex.color=V(ob)$color, layout = R,
vertex.size=6, main=i,vertex.label=NA,edge.arrow.size=.4)
}
##Local
#LY
rm(list=ls())
library(magrittr)
library(httr)
library(data.table)
library(igraph)
######################
#load data and create network
######################
pol = read.csv('data/pol_agg.csv',stringsAsFactors = FALSE)
pol = pol[pol$Source!=pol$website,]
#fake news
#g_valued <- graph_from_data_frame(d = network_table[,1:3,with=FALSE],directed = FALSE,vertices = total_table)
pol_fake = pol[,c(1,2,5)]
pol_fake = pol_fake[pol_fake$FALSE.>0,]
g_fake_valued = graph_from_data_frame(d = pol_fake,directed = T)
am_fake_valued = as_adj(g_fake_valued)
#real news
pol_true = pol[,c(1,2,4)]
pol_true = pol_true[pol_true$TRUE.>0,]
g_real_valued = graph_from_data_frame(d = pol_true,directed = T)
am_real_valued = as_adj(g_real_valued)
centr_degree(g_fake_valued,mode='all',loops = FALSE,normalized = TRUE)
centr_degree(g_real_valued,mode='all',loops = FALSE,normalized = TRUE)
# Compute centralities
par(mfrow=c(1,1), mar=c(1,1,1,1), oma=c(1,1,1,1))
for (i in c('g_real_valued', 'g_fake_valued')){
ob<-get(i)
#For undirected matrices the adjacency matrix is symmetric
#and the hub scores are the same as authority scores,
degree_centrality <- degree(ob,mode="all")
between_centrality <- betweenness(ob, directed=FALSE)
closeness_centrality <-closeness(ob)
eigencentrality <- eigen_centrality(ob,directed=FALSE)  #Remove
authority<-authority_score(ob, scale = TRUE)
hub<-hub_score(g_mean, scale = TRUE)
for (variable in c('degree_centrality','between_centrality','closeness_centrality',
'eigencentrality','authority','hub')){
metric<-get(variable)
if(typeof(metric)=='list'){
sizeval<-metric$vector}
else{
sizeval<-metric
}
V(ob)$size <- sizeval*4 #can adjust the number
L = layout_with_fr(ob)
plot(ob, layout = L, main=paste(i,variable), rescale = TRUE)
print(paste(i,variable))
}
}
for (i in c('g_real_valued', 'g_fake_valued')){
ob<-get(i)
#For undirected matrices the adjacency matrix is symmetric
#and the hub scores are the same as authority scores,
degree_centrality <- degree(ob)
between_centrality <- betweenness(ob, directed=FALSE)
closeness_centrality <-closeness(ob)
eigencentrality <- eigen_centrality(ob,directed=FALSE)  #Remove
authority<-authority_score(ob, scale = TRUE)
hub<-hub_score(g_mean, scale = TRUE)
for (variable in c('degree_centrality','between_centrality','closeness_centrality',
'eigencentrality','authority','hub')){
metric<-get(variable)
if(typeof(metric)=='list'){
sizeval<-metric$vector}
else{
sizeval<-metric
}
V(ob)$size <- sizeval*4 #can adjust the number
L = layout_with_fr(ob)
plot(ob, layout = L, main=paste(i,variable), rescale = TRUE)
print(paste(i,variable))
}
}
par(mfrow=c(1,1), mar=c(1,1,1,1), oma=c(1,1,1,1))
for (i in c('am_real_valued', 'am_fake_valued')){
ob<-get(i)
#For undirected matrices the adjacency matrix is symmetric
#and the hub scores are the same as authority scores,
degree_centrality <- degree(ob)
between_centrality <- betweenness(ob, directed=FALSE)
closeness_centrality <-closeness(ob)
eigencentrality <- eigen_centrality(ob,directed=FALSE)  #Remove
authority<-authority_score(ob, scale = TRUE)
hub<-hub_score(g_mean, scale = TRUE)
for (variable in c('degree_centrality','between_centrality','closeness_centrality',
'eigencentrality','authority','hub')){
metric<-get(variable)
if(typeof(metric)=='list'){
sizeval<-metric$vector}
else{
sizeval<-metric
}
V(ob)$size <- sizeval*4 #can adjust the number
L = layout_with_fr(ob)
plot(ob, layout = L, main=paste(i,variable), rescale = TRUE)
print(paste(i,variable))
}
}
between_centrality(am_fake_valued)
rm(list=ls())
library(magrittr)
library(httr)
library(data.table)
library(igraph)
##Local
#LY
rm(list=ls())
library(magrittr)
library(httr)
library(data.table)
library(igraph)
######################
#load data and create network
######################
pol = read.csv('data/pol_agg.csv',stringsAsFactors = FALSE)
pol = pol[pol$Source!=pol$website,] #Remove self-loop
#fake news
#g_valued <- graph_from_data_frame(d = network_table[,1:3,with=FALSE],directed = FALSE,vertices = total_table)
pol_fake = pol[,c(1,2,5)]
pol_fake = pol_fake[pol_fake$FALSE.>0,]
g_fake_valued = graph_from_data_frame(d = pol_fake,directed = T)
am_fake_valued = as_adj(g_fake_valued)
#real news
pol_true = pol[,c(1,2,4)]
pol_true = pol_true[pol_true$TRUE.>0,]
g_real_valued = graph_from_data_frame(d = pol_true,directed = T)
am_real_valued = as_adj(g_real_valued)
centr_degree(g_fake_valued,mode='all',loops = FALSE,normalized = TRUE)
centr_degree(g_real_valued,mode='all',loops = FALSE,normalized = TRUE)
####################################
# Compute centralities
between_centrality(am_fake_valued)
library('sna')
between_centrality(am_fake_valued)
between_centrality(g_fake_valued)
ob<-g_real_valued
E(ob)$width =  5*(pol$page_url+1/max(pol$page_url))
wd<-graph.strength(ob,weights = E(g_valued)$CoOccurrences)
wb<-betweenness(ob,directed = FALSE,
weights = E(g_valued)$CoOccurrences*0.8,normalized = TRUE)
wc<-closeness(ob,mode = "all",
weights = E(g_valued)$CoOccurrences*0.8,normalized = TRUE)
we<-evcent(ob,directed = FALSE,
weights = E(g_valued)$CoOccurrences*0.8)
for (i in c('wd','wb','wc','wd')){
v<-get(i)
print(sort(v,decreasing=TRUE)[1:5])
}
ob<-g_real_valued
E(ob)$width =  5*(pol$page_url+1/max(pol$page_url))
ob<-g_real_valued
E(ob)$width =  5*(pol_true$TRUE.+1/max(pol_true$TRUE.))
wd<-graph.strength(ob,weights = E(g_valued)$CoOccurrences)
wb<-betweenness(ob,directed = FALSE,
weights = E(g_valued)$CoOccurrences*0.8,normalized = TRUE)
wc<-closeness(ob,mode = "all",
weights = E(g_valued)$CoOccurrences*0.8,normalized = TRUE)
we<-evcent(ob,directed = FALSE,
weights = E(g_valued)$CoOccurrences*0.8)
for (i in c('wd','wb','wc','wd')){
v<-get(i)
print(sort(v,decreasing=TRUE)[1:5])
}
ob<-g_real_valued
E(ob)$width =  5*(pol_true$TRUE.+1/max(pol_true$TRUE.))
wd<-graph.strength(ob,weights = E(ob)$width)
wb<-betweenness(ob,directed = FALSE,
weights = E(ob)$width*0.8,normalized = TRUE)
wc<-closeness(ob,mode = "all",
weights = E(ob)$width*0.8,normalized = TRUE)
we<-evcent(ob,directed = FALSE,
weights = E(ob)$width*0.8)
wb<-betweenness(ob,directed = FALSE,
weights = E(ob)$width*0.8,normalized = TRUE)
wd
wc<-closeness(ob,mode = "all",
weights = E(ob)$width*0.8,normalized = TRUE)
wc<-closeness(ob,mode = "all",normalized = TRUE)
wc<-closeness(ob,directed=TRUE,normalized = TRUE)
wc<-closeness(ob,directed=TRUE)
wc<-closeness(ob)
ob<-g_real_valued
E(ob)$width =  5*(pol_true$TRUE.+1/max(pol_true$TRUE.))
wd<-graph.strength(ob,weights = E(ob)$width*0.8)
wb<-betweenness(ob,directed = TRUE,
weights = E(ob)$width*0.8,normalized = TRUE)
wb<-betweenness(ob,directed = TRUE, mode='all',
weights = E(ob)$width*0.8,normalized = TRUE)
wc<-closeness(ob,mode = "all",
weights = E(ob)$width*0.8,normalized = TRUE)
we<-evcent(ob,directed = FALSE,
weights = E(ob)$width*0.8)
g_real_valued
closeness(ob)
closeness(am_fake_valued)
am_fake_valued
am_fake_valued = as_adjacency_matrix(g_fake_valued)
am_real_valued = as_adjacency_matrix(g_real_valued)
closeness(ob)
closeness(ob)
closeness(am_fake_valued)
?closeness
detach('sna')
detach(sna)
detach(package:sna)
ob<-g_real_valued
E(ob)$width =  5*(pol_true$TRUE.+1/max(pol_true$TRUE.))
wd<-graph.strength(ob,weights = E(ob)$width*0.8)
wb<-betweenness(ob,directed = TRUE, weights = E(ob)$width*0.8,normalized = TRUE)
wc<-closeness(ob,mode = "all",
weights = E(ob)$width*0.8,normalized = TRUE)
we<-evcent(ob,directed = FALSE,
weights = E(ob)$width*0.8)
for (i in c('wd','wb','wc','wd')){
v<-get(i)
print(sort(v,decreasing=TRUE)[1:5])
}
ob<-g_real_valued
E(ob)$width =  5*(pol_true$TRUE.+1/max(pol_true$TRUE.))
wd<-graph.strength(ob,weights = E(ob)$width*0.8)
wb<-betweenness(ob,directed = TRUE, weights = E(ob)$width*0.8,normalized = TRUE)
wc<-closeness(ob,mode = "all",
weights = E(ob)$width*0.8,normalized = TRUE)
we<-evcent(ob,directed = FALSE,
weights = E(ob)$width*0.8)
for (i in c('wd','wb','wc','wd')){
v<-get(i)
print(sort(v,decreasing=TRUE)[1:5])
print('------')
}
####################################
ob<-g_real_valued
E(ob)$width =  5*(pol_true$TRUE.+1/max(pol_true$TRUE.))
wd<-graph.strength(ob,weights = E(ob)$width*0.8)
wb<-betweenness(ob,directed = TRUE, weights = E(ob)$width*0.8,normalized = TRUE)
wc<-closeness(ob,mode = "all",
weights = E(ob)$width*0.8,normalized = TRUE)
we<-evcent(ob,directed = FALSE,
weights = E(ob)$width*0.8)
for (i in c('wd','wb','wc','wd')){
v<-get(i)
print(i)
print(sort(v,decreasing=TRUE)[1:5])
print('------')
}
####################################
ob<-g_fake_valued
E(ob)$width =  5*(pol_true$TRUE.+1/max(pol_true$TRUE.))
wd<-graph.strength(ob,weights = E(ob)$width*0.8)
wb<-betweenness(ob,directed = TRUE, weights = E(ob)$width*0.8,normalized = TRUE)
wc<-closeness(ob,mode = "all",
weights = E(ob)$width*0.8,normalized = TRUE)
we<-evcent(ob,directed = FALSE,
weights = E(ob)$width*0.8)
for (i in c('wd','wb','wc','wd')){
v<-get(i)
print(i)
print(sort(v,decreasing=TRUE)[1:5])
print('------')
}
####################################
ob<-g_fake_valued
E(ob)$width =  5*(pol_fake$TRUE.+1/max(pol_fake$TRUE.))
wd<-graph.strength(ob,weights = E(ob)$width*0.8)
wb<-betweenness(ob,directed = TRUE, weights = E(ob)$width*0.8,normalized = TRUE)
wc<-closeness(ob,mode = "all",
weights = E(ob)$width*0.8,normalized = TRUE)
we<-evcent(ob,directed = FALSE,
weights = E(ob)$width*0.8)
for (i in c('wd','wb','wc','wd')){
v<-get(i)
print(i)
print(sort(v,decreasing=TRUE)[1:5])
print('------')
}
